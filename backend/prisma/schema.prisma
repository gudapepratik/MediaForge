// generator client {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma"
// }
// generator client {
//   provider      = "prisma-client-js"
//   binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
// }
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videos video[]
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum VIDEO_STATE {
  CREATED // when first requested for presigned url
  UPLOADED // when video is uploaded to storage
  PROCESSING // when the transcoding is in progress
  READY // when video + versions are ready to serve
  FAILED // when upload / transcoding fails
}

model video {
  id          String      @id @default(cuid())
  userId      String
  fileName    String
  contentType String
  fileSize    Int
  storageKey  String?
  status      VIDEO_STATE @default(CREATED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user     User           @relation(fields: [userId], references: [id])
  variants videoVariant[]
}

model videoVariant {
  id         String   @id @default(cuid())
  videoId    String
  resolution String
  storageKey String
  createdAt  DateTime @default(now())

  video video @relation(fields: [videoId], references: [id])
}
