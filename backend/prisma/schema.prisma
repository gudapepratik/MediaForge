// generator client {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma"
// }
// generator client {
//   provider      = "prisma-client-js"
//   binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
// }
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videos video[]
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum VIDEO_STATE {
  CREATED // when first requested for presigned url
  UPLOADED // when video is uploaded to storage
  PROCESSING // when the transcoding is in progress
  READY // when video + versions are ready to serve
  FAILED // when upload / transcoding fails
  CANCELLED // change -> when user cancels upload / process
}

model video {
  id          String      @id @default(cuid())
  userId      String
  fileName    String
  contentType String
  fileSize    Int
  hash        String      @unique
  storageKey  String?
  status      VIDEO_STATE @default(CREATED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user     User           @relation(fields: [userId], references: [id])
  variants videoVariant[]
  upload   upload?
}

enum UPLOAD_STATE {
  INITIATED // when first time the upload entry is created
  PAUSED // when user pauses
  UPLOADING // when parts are uploading
  FAILED // network or any error
  COMPLETED // when upload is completely done
  ABORTED // when user cancels
}

model upload {
  id      String @id @default(cuid())
  videoId String @unique

  uploadId String       @unique // from S3
  status   UPLOAD_STATE @default(INITIATED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video       video        @relation(fields: [videoId], references: [id], onDelete: Cascade)
  uploadParts uploadPart[]
}

enum PART_STATE {
  PENDING
  INITIATED
  COMPLETED
  FAILED // should be FAILED
}

model uploadPart {
  id       String @id @default(cuid())
  uploadId String // from DB

  partNo    Int
  partSize  BigInt
  eTag      String?
  status    PART_STATE @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  upload upload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([uploadId, partNo])
}

model videoVariant {
  id         String   @id @default(cuid())
  videoId    String
  resolution String
  storageKey String
  createdAt  DateTime @default(now())

  video video @relation(fields: [videoId], references: [id])
}
